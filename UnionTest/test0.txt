
    #include "unionfind.h"
#include <iostream>
#include "cassert"
using namespace std;


class Box{
    int group_id;
public:
    int size;
    Node<Box>* head;
    Box(int id): group_id(id), size(1){}
    int getID()
    {
        return group_id;
    }
};

int main()
{
UnionFind<Box> uni(10);
uni.union_groups(7,8);
//{0->[0],1->[1],2->[2],3->[3],4->[4],5->[5],6->[6],8->[8, 7],9->[9],}
assert(uni.find(2)==2);
uni.union_groups(4,2);
//{0->[0],1->[1],3->[3],4->[2, 4],5->[5],6->[6],8->[8, 7],9->[9],}
assert(uni.find(4)==4);
uni.union_groups(0,1);
//{1->[1, 0],3->[3],4->[2, 4],5->[5],6->[6],8->[8, 7],9->[9],}
assert(uni.find(3)==3);
uni.union_groups(6,9);
//{1->[1, 0],3->[3],4->[2, 4],5->[5],8->[8, 7],9->[9, 6],}
assert(uni.find(4)==4);
uni.union_groups(3,9);
//{1->[1, 0],4->[2, 4],5->[5],8->[8, 7],9->[9, 6, 3],}
assert(uni.find(4)==4);
uni.union_groups(8,2);
//{1->[1, 0],5->[5],8->[2, 4, 8, 7],9->[9, 6, 3],}
assert(uni.find(8)==8);
uni.union_groups(6,5);
//{1->[1, 0],8->[2, 4, 8, 7],9->[5, 9, 6, 3],}
assert(uni.find(5)==9);
uni.union_groups(0,4);
//{8->[2, 4, 8, 7, 1, 0],9->[5, 9, 6, 3],}
assert(uni.find(8)==8);
uni.union_groups(8,4);
//{8->[2, 4, 8, 7, 1, 0],9->[5, 9, 6, 3],}
assert(uni.find(4)==8);
uni.union_groups(8,7);
//{8->[2, 4, 8, 7, 1, 0],9->[5, 9, 6, 3],}
assert(uni.find(8)==8);
uni.union_groups(3,0);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(2)==8);
uni.union_groups(8,1);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(3)==8);
uni.union_groups(6,2);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(2)==8);
uni.union_groups(2,1);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(4)==8);
uni.union_groups(1,6);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(8)==8);
uni.union_groups(0,8);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(6)==8);
uni.union_groups(5,3);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(8)==8);
uni.union_groups(3,6);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(1)==8);
uni.union_groups(4,1);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(9)==8);
uni.union_groups(7,7);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(1)==8);
uni.union_groups(9,7);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(3)==8);
uni.union_groups(4,0);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(7)==8);
uni.union_groups(3,3);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(0)==8);
uni.union_groups(6,5);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(5)==8);
uni.union_groups(5,1);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(8)==8);
uni.union_groups(5,8);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(1)==8);
uni.union_groups(5,6);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(9)==8);
uni.union_groups(5,8);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(8)==8);
uni.union_groups(9,4);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(5)==8);
uni.union_groups(6,6);
//{8->[2, 4, 8, 7, 1, 0, 5, 9, 6, 3],}
assert(uni.find(7)==8);
    cout << "done";
}
