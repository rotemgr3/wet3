
    #include "unionfind.h"
#include <iostream>
#include "cassert"
using namespace std;


class Box{
    int group_id;
public:
    int size;
    Node<Box>* head;
    Box(int id): group_id(id), size(1){}
    int getID()
    {
        return group_id;
    }
};

int main()
{
UnionFind<Box> uni(20);
uni.union_groups(16,14);
//{0->[0],1->[1],2->[2],3->[3],4->[4],5->[5],6->[6],7->[7],8->[8],9->[9],10->[10],11->[11],12->[12],13->[13],15->[15],16->[14, 16],17->[17],18->[18],19->[19],}
assert(uni.find(13)==13);
uni.union_groups(1,7);
//{0->[0],2->[2],3->[3],4->[4],5->[5],6->[6],7->[7, 1],8->[8],9->[9],10->[10],11->[11],12->[12],13->[13],15->[15],16->[14, 16],17->[17],18->[18],19->[19],}
assert(uni.find(16)==16);
uni.union_groups(16,1);
//{0->[0],2->[2],3->[3],4->[4],5->[5],6->[6],8->[8],9->[9],10->[10],11->[11],12->[12],13->[13],15->[15],16->[7, 1, 14, 16],17->[17],18->[18],19->[19],}
assert(uni.find(6)==6);
uni.union_groups(6,11);
//{0->[0],2->[2],3->[3],4->[4],5->[5],8->[8],9->[9],10->[10],11->[11, 6],12->[12],13->[13],15->[15],16->[7, 1, 14, 16],17->[17],18->[18],19->[19],}
assert(uni.find(3)==3);
uni.union_groups(1,5);
//{0->[0],2->[2],3->[3],4->[4],8->[8],9->[9],10->[10],11->[11, 6],12->[12],13->[13],15->[15],16->[5, 7, 1, 14, 16],17->[17],18->[18],19->[19],}
assert(uni.find(17)==17);
uni.union_groups(19,10);
//{0->[0],2->[2],3->[3],4->[4],8->[8],9->[9],11->[11, 6],12->[12],13->[13],15->[15],16->[5, 7, 1, 14, 16],17->[17],18->[18],19->[10, 19],}
assert(uni.find(15)==15);
uni.union_groups(1,9);
//{0->[0],2->[2],3->[3],4->[4],8->[8],11->[11, 6],12->[12],13->[13],15->[15],16->[9, 5, 7, 1, 14, 16],17->[17],18->[18],19->[10, 19],}
assert(uni.find(5)==16);
uni.union_groups(6,5);
//{0->[0],2->[2],3->[3],4->[4],8->[8],12->[12],13->[13],15->[15],16->[9, 5, 7, 1, 14, 16, 11, 6],17->[17],18->[18],19->[10, 19],}
assert(uni.find(2)==2);
uni.union_groups(0,15);
//{2->[2],3->[3],4->[4],8->[8],12->[12],13->[13],15->[15, 0],16->[9, 5, 7, 1, 14, 16, 11, 6],17->[17],18->[18],19->[10, 19],}
assert(uni.find(13)==13);
uni.union_groups(0,9);
//{2->[2],3->[3],4->[4],8->[8],12->[12],13->[13],16->[9, 5, 7, 1, 14, 16, 11, 6, 15, 0],17->[17],18->[18],19->[10, 19],}
assert(uni.find(14)==16);
uni.union_groups(9,2);
//{3->[3],4->[4],8->[8],12->[12],13->[13],16->[2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0],17->[17],18->[18],19->[10, 19],}
assert(uni.find(12)==12);
uni.union_groups(3,2);
//{4->[4],8->[8],12->[12],13->[13],16->[2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3],17->[17],18->[18],19->[10, 19],}
assert(uni.find(1)==16);
uni.union_groups(15,9);
//{4->[4],8->[8],12->[12],13->[13],16->[2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3],17->[17],18->[18],19->[10, 19],}
assert(uni.find(1)==16);
uni.union_groups(11,8);
//{4->[4],12->[12],13->[13],16->[8, 2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3],17->[17],18->[18],19->[10, 19],}
assert(uni.find(4)==4);
uni.union_groups(6,18);
//{4->[4],12->[12],13->[13],16->[18, 8, 2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3],17->[17],19->[10, 19],}
assert(uni.find(12)==12);
uni.union_groups(17,6);
//{4->[4],12->[12],13->[13],16->[18, 8, 2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3, 17],19->[10, 19],}
assert(uni.find(17)==16);
uni.union_groups(8,0);
//{4->[4],12->[12],13->[13],16->[18, 8, 2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3, 17],19->[10, 19],}
assert(uni.find(10)==19);
uni.union_groups(9,3);
//{4->[4],12->[12],13->[13],16->[18, 8, 2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3, 17],19->[10, 19],}
assert(uni.find(18)==16);
uni.union_groups(16,18);
//{4->[4],12->[12],13->[13],16->[18, 8, 2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3, 17],19->[10, 19],}
assert(uni.find(1)==16);
uni.union_groups(2,14);
//{4->[4],12->[12],13->[13],16->[18, 8, 2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3, 17],19->[10, 19],}
assert(uni.find(1)==16);
uni.union_groups(4,12);
//{12->[12, 4],13->[13],16->[18, 8, 2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3, 17],19->[10, 19],}
assert(uni.find(14)==16);
uni.union_groups(13,8);
//{12->[12, 4],16->[18, 8, 2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3, 17, 13],19->[10, 19],}
assert(uni.find(19)==19);
uni.union_groups(2,17);
//{12->[12, 4],16->[18, 8, 2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3, 17, 13],19->[10, 19],}
assert(uni.find(13)==16);
uni.union_groups(5,2);
//{12->[12, 4],16->[18, 8, 2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3, 17, 13],19->[10, 19],}
assert(uni.find(2)==16);
uni.union_groups(8,6);
//{12->[12, 4],16->[18, 8, 2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3, 17, 13],19->[10, 19],}
assert(uni.find(3)==16);
uni.union_groups(16,3);
//{12->[12, 4],16->[18, 8, 2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3, 17, 13],19->[10, 19],}
assert(uni.find(5)==16);
uni.union_groups(14,13);
//{12->[12, 4],16->[18, 8, 2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3, 17, 13],19->[10, 19],}
assert(uni.find(11)==16);
uni.union_groups(4,18);
//{16->[18, 8, 2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3, 17, 13, 12, 4],19->[10, 19],}
assert(uni.find(16)==16);
uni.union_groups(13,12);
//{16->[18, 8, 2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3, 17, 13, 12, 4],19->[10, 19],}
assert(uni.find(4)==16);
uni.union_groups(7,2);
//{16->[18, 8, 2, 9, 5, 7, 1, 14, 16, 11, 6, 15, 0, 3, 17, 13, 12, 4],19->[10, 19],}
assert(uni.find(12)==16);
    cout << "done";
}
